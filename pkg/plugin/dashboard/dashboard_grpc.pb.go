// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dashboard

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PluginClient is the client API for Plugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginClient interface {
	Content(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (*ContentResponse, error)
	HandleAction(ctx context.Context, in *HandleActionRequest, opts ...grpc.CallOption) (*HandleActionResponse, error)
	Navigation(ctx context.Context, in *NavigationRequest, opts ...grpc.CallOption) (*NavigationResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Print(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*PrintResponse, error)
	ObjectStatus(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectStatusResponse, error)
	PrintTabs(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*PrintTabResponse, error)
	WatchAdd(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*Empty, error)
	WatchUpdate(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*Empty, error)
	WatchDelete(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*Empty, error)
}

type pluginClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginClient(cc grpc.ClientConnInterface) PluginClient {
	return &pluginClient{cc}
}

func (c *pluginClient) Content(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (*ContentResponse, error) {
	out := new(ContentResponse)
	err := c.cc.Invoke(ctx, "/dashboard.Plugin/Content", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) HandleAction(ctx context.Context, in *HandleActionRequest, opts ...grpc.CallOption) (*HandleActionResponse, error) {
	out := new(HandleActionResponse)
	err := c.cc.Invoke(ctx, "/dashboard.Plugin/HandleAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) Navigation(ctx context.Context, in *NavigationRequest, opts ...grpc.CallOption) (*NavigationResponse, error) {
	out := new(NavigationResponse)
	err := c.cc.Invoke(ctx, "/dashboard.Plugin/Navigation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/dashboard.Plugin/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) Print(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*PrintResponse, error) {
	out := new(PrintResponse)
	err := c.cc.Invoke(ctx, "/dashboard.Plugin/Print", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) ObjectStatus(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectStatusResponse, error) {
	out := new(ObjectStatusResponse)
	err := c.cc.Invoke(ctx, "/dashboard.Plugin/ObjectStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) PrintTabs(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*PrintTabResponse, error) {
	out := new(PrintTabResponse)
	err := c.cc.Invoke(ctx, "/dashboard.Plugin/PrintTabs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) WatchAdd(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dashboard.Plugin/WatchAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) WatchUpdate(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dashboard.Plugin/WatchUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) WatchDelete(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dashboard.Plugin/WatchDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServer is the server API for Plugin service.
// All implementations must embed UnimplementedPluginServer
// for forward compatibility
type PluginServer interface {
	Content(context.Context, *ContentRequest) (*ContentResponse, error)
	HandleAction(context.Context, *HandleActionRequest) (*HandleActionResponse, error)
	Navigation(context.Context, *NavigationRequest) (*NavigationResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Print(context.Context, *ObjectRequest) (*PrintResponse, error)
	ObjectStatus(context.Context, *ObjectRequest) (*ObjectStatusResponse, error)
	PrintTabs(context.Context, *ObjectRequest) (*PrintTabResponse, error)
	WatchAdd(context.Context, *WatchRequest) (*Empty, error)
	WatchUpdate(context.Context, *WatchRequest) (*Empty, error)
	WatchDelete(context.Context, *WatchRequest) (*Empty, error)
	mustEmbedUnimplementedPluginServer()
}

// UnimplementedPluginServer must be embedded to have forward compatible implementations.
type UnimplementedPluginServer struct {
}

func (UnimplementedPluginServer) Content(context.Context, *ContentRequest) (*ContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Content not implemented")
}
func (UnimplementedPluginServer) HandleAction(context.Context, *HandleActionRequest) (*HandleActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleAction not implemented")
}
func (UnimplementedPluginServer) Navigation(context.Context, *NavigationRequest) (*NavigationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Navigation not implemented")
}
func (UnimplementedPluginServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedPluginServer) Print(context.Context, *ObjectRequest) (*PrintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Print not implemented")
}
func (UnimplementedPluginServer) ObjectStatus(context.Context, *ObjectRequest) (*ObjectStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectStatus not implemented")
}
func (UnimplementedPluginServer) PrintTabs(context.Context, *ObjectRequest) (*PrintTabResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintTabs not implemented")
}
func (UnimplementedPluginServer) WatchAdd(context.Context, *WatchRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchAdd not implemented")
}
func (UnimplementedPluginServer) WatchUpdate(context.Context, *WatchRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchUpdate not implemented")
}
func (UnimplementedPluginServer) WatchDelete(context.Context, *WatchRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchDelete not implemented")
}
func (UnimplementedPluginServer) mustEmbedUnimplementedPluginServer() {}

// UnsafePluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServer will
// result in compilation errors.
type UnsafePluginServer interface {
	mustEmbedUnimplementedPluginServer()
}

func RegisterPluginServer(s grpc.ServiceRegistrar, srv PluginServer) {
	s.RegisterService(&Plugin_ServiceDesc, srv)
}

func _Plugin_Content_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).Content(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.Plugin/Content",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).Content(ctx, req.(*ContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_HandleAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).HandleAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.Plugin/HandleAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).HandleAction(ctx, req.(*HandleActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_Navigation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NavigationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).Navigation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.Plugin/Navigation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).Navigation(ctx, req.(*NavigationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.Plugin/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_Print_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).Print(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.Plugin/Print",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).Print(ctx, req.(*ObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_ObjectStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).ObjectStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.Plugin/ObjectStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).ObjectStatus(ctx, req.(*ObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_PrintTabs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).PrintTabs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.Plugin/PrintTabs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).PrintTabs(ctx, req.(*ObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_WatchAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).WatchAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.Plugin/WatchAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).WatchAdd(ctx, req.(*WatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_WatchUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).WatchUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.Plugin/WatchUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).WatchUpdate(ctx, req.(*WatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_WatchDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).WatchDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.Plugin/WatchDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).WatchDelete(ctx, req.(*WatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Plugin_ServiceDesc is the grpc.ServiceDesc for Plugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Plugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dashboard.Plugin",
	HandlerType: (*PluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Content",
			Handler:    _Plugin_Content_Handler,
		},
		{
			MethodName: "HandleAction",
			Handler:    _Plugin_HandleAction_Handler,
		},
		{
			MethodName: "Navigation",
			Handler:    _Plugin_Navigation_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Plugin_Register_Handler,
		},
		{
			MethodName: "Print",
			Handler:    _Plugin_Print_Handler,
		},
		{
			MethodName: "ObjectStatus",
			Handler:    _Plugin_ObjectStatus_Handler,
		},
		{
			MethodName: "PrintTabs",
			Handler:    _Plugin_PrintTabs_Handler,
		},
		{
			MethodName: "WatchAdd",
			Handler:    _Plugin_WatchAdd_Handler,
		},
		{
			MethodName: "WatchUpdate",
			Handler:    _Plugin_WatchUpdate_Handler,
		},
		{
			MethodName: "WatchDelete",
			Handler:    _Plugin_WatchDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dashboard.proto",
}

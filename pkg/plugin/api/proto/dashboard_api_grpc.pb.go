// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DashboardClient is the client API for Dashboard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DashboardClient interface {
	List(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Get(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	ApplyYAML(ctx context.Context, in *ApplyYAMLRequest, opts ...grpc.CallOption) (*ApplyYAMLResponse, error)
	Delete(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	PortForward(ctx context.Context, in *PortForwardRequest, opts ...grpc.CallOption) (*PortForwardResponse, error)
	CancelPortForward(ctx context.Context, in *CancelPortForwardRequest, opts ...grpc.CallOption) (*Empty, error)
	ListNamespaces(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NamespacesResponse, error)
	ForceFrontendUpdate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	SendAlert(ctx context.Context, in *AlertRequest, opts ...grpc.CallOption) (*Empty, error)
	CreateLink(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*LinkResponse, error)
	SendEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
}

type dashboardClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardClient(cc grpc.ClientConnInterface) DashboardClient {
	return &dashboardClient{cc}
}

func (c *dashboardClient) List(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/proto.Dashboard/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) Get(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/proto.Dashboard/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/proto.Dashboard/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/proto.Dashboard/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) ApplyYAML(ctx context.Context, in *ApplyYAMLRequest, opts ...grpc.CallOption) (*ApplyYAMLResponse, error) {
	out := new(ApplyYAMLResponse)
	err := c.cc.Invoke(ctx, "/proto.Dashboard/ApplyYAML", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) Delete(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/proto.Dashboard/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) PortForward(ctx context.Context, in *PortForwardRequest, opts ...grpc.CallOption) (*PortForwardResponse, error) {
	out := new(PortForwardResponse)
	err := c.cc.Invoke(ctx, "/proto.Dashboard/PortForward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) CancelPortForward(ctx context.Context, in *CancelPortForwardRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.Dashboard/CancelPortForward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) ListNamespaces(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NamespacesResponse, error) {
	out := new(NamespacesResponse)
	err := c.cc.Invoke(ctx, "/proto.Dashboard/ListNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) ForceFrontendUpdate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.Dashboard/ForceFrontendUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) SendAlert(ctx context.Context, in *AlertRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.Dashboard/SendAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) CreateLink(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*LinkResponse, error) {
	out := new(LinkResponse)
	err := c.cc.Invoke(ctx, "/proto.Dashboard/CreateLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) SendEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/proto.Dashboard/SendEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashboardServer is the server API for Dashboard service.
// All implementations must embed UnimplementedDashboardServer
// for forward compatibility
type DashboardServer interface {
	List(context.Context, *KeyRequest) (*ListResponse, error)
	Get(context.Context, *KeyRequest) (*GetResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	ApplyYAML(context.Context, *ApplyYAMLRequest) (*ApplyYAMLResponse, error)
	Delete(context.Context, *KeyRequest) (*DeleteResponse, error)
	PortForward(context.Context, *PortForwardRequest) (*PortForwardResponse, error)
	CancelPortForward(context.Context, *CancelPortForwardRequest) (*Empty, error)
	ListNamespaces(context.Context, *Empty) (*NamespacesResponse, error)
	ForceFrontendUpdate(context.Context, *Empty) (*Empty, error)
	SendAlert(context.Context, *AlertRequest) (*Empty, error)
	CreateLink(context.Context, *KeyRequest) (*LinkResponse, error)
	SendEvent(context.Context, *EventRequest) (*EventResponse, error)
	mustEmbedUnimplementedDashboardServer()
}

// UnimplementedDashboardServer must be embedded to have forward compatible implementations.
type UnimplementedDashboardServer struct {
}

func (UnimplementedDashboardServer) List(context.Context, *KeyRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDashboardServer) Get(context.Context, *KeyRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDashboardServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDashboardServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDashboardServer) ApplyYAML(context.Context, *ApplyYAMLRequest) (*ApplyYAMLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyYAML not implemented")
}
func (UnimplementedDashboardServer) Delete(context.Context, *KeyRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDashboardServer) PortForward(context.Context, *PortForwardRequest) (*PortForwardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PortForward not implemented")
}
func (UnimplementedDashboardServer) CancelPortForward(context.Context, *CancelPortForwardRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPortForward not implemented")
}
func (UnimplementedDashboardServer) ListNamespaces(context.Context, *Empty) (*NamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (UnimplementedDashboardServer) ForceFrontendUpdate(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceFrontendUpdate not implemented")
}
func (UnimplementedDashboardServer) SendAlert(context.Context, *AlertRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAlert not implemented")
}
func (UnimplementedDashboardServer) CreateLink(context.Context, *KeyRequest) (*LinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLink not implemented")
}
func (UnimplementedDashboardServer) SendEvent(context.Context, *EventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEvent not implemented")
}
func (UnimplementedDashboardServer) mustEmbedUnimplementedDashboardServer() {}

// UnsafeDashboardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashboardServer will
// result in compilation errors.
type UnsafeDashboardServer interface {
	mustEmbedUnimplementedDashboardServer()
}

func RegisterDashboardServer(s grpc.ServiceRegistrar, srv DashboardServer) {
	s.RegisterService(&Dashboard_ServiceDesc, srv)
}

func _Dashboard_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dashboard/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).List(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dashboard/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).Get(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dashboard/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dashboard/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_ApplyYAML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyYAMLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).ApplyYAML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dashboard/ApplyYAML",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).ApplyYAML(ctx, req.(*ApplyYAMLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dashboard/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).Delete(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_PortForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortForwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).PortForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dashboard/PortForward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).PortForward(ctx, req.(*PortForwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_CancelPortForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPortForwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).CancelPortForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dashboard/CancelPortForward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).CancelPortForward(ctx, req.(*CancelPortForwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dashboard/ListNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).ListNamespaces(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_ForceFrontendUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).ForceFrontendUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dashboard/ForceFrontendUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).ForceFrontendUpdate(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_SendAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).SendAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dashboard/SendAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).SendAlert(ctx, req.(*AlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_CreateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).CreateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dashboard/CreateLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).CreateLink(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_SendEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).SendEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dashboard/SendEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).SendEvent(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dashboard_ServiceDesc is the grpc.ServiceDesc for Dashboard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dashboard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Dashboard",
	HandlerType: (*DashboardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Dashboard_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Dashboard_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Dashboard_Update_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Dashboard_Create_Handler,
		},
		{
			MethodName: "ApplyYAML",
			Handler:    _Dashboard_ApplyYAML_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Dashboard_Delete_Handler,
		},
		{
			MethodName: "PortForward",
			Handler:    _Dashboard_PortForward_Handler,
		},
		{
			MethodName: "CancelPortForward",
			Handler:    _Dashboard_CancelPortForward_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _Dashboard_ListNamespaces_Handler,
		},
		{
			MethodName: "ForceFrontendUpdate",
			Handler:    _Dashboard_ForceFrontendUpdate_Handler,
		},
		{
			MethodName: "SendAlert",
			Handler:    _Dashboard_SendAlert_Handler,
		},
		{
			MethodName: "CreateLink",
			Handler:    _Dashboard_CreateLink_Handler,
		},
		{
			MethodName: "SendEvent",
			Handler:    _Dashboard_SendEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dashboard_api.proto",
}

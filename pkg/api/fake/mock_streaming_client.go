// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vmware-tanzu/octant/pkg/api (interfaces: StreamingClient)

// Package fake is a generated GoMock package.
package fake

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	octant "github.com/vmware-tanzu/octant/internal/octant"
	api "github.com/vmware-tanzu/octant/pkg/api"
	event "github.com/vmware-tanzu/octant/pkg/event"
)

// MockStreamingClient is a mock of StreamingClient interface.
type MockStreamingClient struct {
	ctrl     *gomock.Controller
	recorder *MockStreamingClientMockRecorder
}

// MockStreamingClientMockRecorder is the mock recorder for MockStreamingClient.
type MockStreamingClientMockRecorder struct {
	mock *MockStreamingClient
}

// NewMockStreamingClient creates a new mock instance.
func NewMockStreamingClient(ctrl *gomock.Controller) *MockStreamingClient {
	mock := &MockStreamingClient{ctrl: ctrl}
	mock.recorder = &MockStreamingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamingClient) EXPECT() *MockStreamingClientMockRecorder {
	return m.recorder
}

// Handlers mocks base method.
func (m *MockStreamingClient) Handlers() map[string][]octant.ClientRequestHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handlers")
	ret0, _ := ret[0].(map[string][]octant.ClientRequestHandler)
	return ret0
}

// Handlers indicates an expected call of Handlers.
func (mr *MockStreamingClientMockRecorder) Handlers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handlers", reflect.TypeOf((*MockStreamingClient)(nil).Handlers))
}

// ID mocks base method.
func (m *MockStreamingClient) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockStreamingClientMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockStreamingClient)(nil).ID))
}

// Receive mocks base method.
func (m *MockStreamingClient) Receive() (api.StreamRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive")
	ret0, _ := ret[0].(api.StreamRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Receive indicates an expected call of Receive.
func (mr *MockStreamingClientMockRecorder) Receive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockStreamingClient)(nil).Receive))
}

// Send mocks base method.
func (m *MockStreamingClient) Send(arg0 event.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Send", arg0)
}

// Send indicates an expected call of Send.
func (mr *MockStreamingClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockStreamingClient)(nil).Send), arg0)
}

// State mocks base method.
func (m *MockStreamingClient) State() octant.State {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(octant.State)
	return ret0
}

// State indicates an expected call of State.
func (mr *MockStreamingClientMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockStreamingClient)(nil).State))
}

// StopCh mocks base method.
func (m *MockStreamingClient) StopCh() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCh")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// StopCh indicates an expected call of StopCh.
func (mr *MockStreamingClientMockRecorder) StopCh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCh", reflect.TypeOf((*MockStreamingClient)(nil).StopCh))
}

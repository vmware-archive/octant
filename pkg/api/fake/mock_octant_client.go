// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vmware-tanzu/octant/pkg/api (interfaces: OctantClient)

// Package fake is a generated GoMock package.
package fake

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	event "github.com/vmware-tanzu/octant/pkg/event"
)

// MockOctantClient is a mock of OctantClient interface.
type MockOctantClient struct {
	ctrl     *gomock.Controller
	recorder *MockOctantClientMockRecorder
}

// MockOctantClientMockRecorder is the mock recorder for MockOctantClient.
type MockOctantClientMockRecorder struct {
	mock *MockOctantClient
}

// NewMockOctantClient creates a new mock instance.
func NewMockOctantClient(ctrl *gomock.Controller) *MockOctantClient {
	mock := &MockOctantClient{ctrl: ctrl}
	mock.recorder = &MockOctantClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOctantClient) EXPECT() *MockOctantClientMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockOctantClient) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockOctantClientMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockOctantClient)(nil).ID))
}

// Send mocks base method.
func (m *MockOctantClient) Send(arg0 event.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Send", arg0)
}

// Send indicates an expected call of Send.
func (mr *MockOctantClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockOctantClient)(nil).Send), arg0)
}

// StopCh mocks base method.
func (m *MockOctantClient) StopCh() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCh")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// StopCh indicates an expected call of StopCh.
func (mr *MockOctantClientMockRecorder) StopCh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCh", reflect.TypeOf((*MockOctantClient)(nil).StopCh))
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vmware-tanzu/octant/pkg/event (interfaces: WSClientGetter,WSEventSender)

// Package fake is a generated GoMock package.
package fake

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	event "github.com/vmware-tanzu/octant/pkg/event"
)

// MockWSClientGetter is a mock of WSClientGetter interface
type MockWSClientGetter struct {
	ctrl     *gomock.Controller
	recorder *MockWSClientGetterMockRecorder
}

// MockWSClientGetterMockRecorder is the mock recorder for MockWSClientGetter
type MockWSClientGetterMockRecorder struct {
	mock *MockWSClientGetter
}

// NewMockWSClientGetter creates a new mock instance
func NewMockWSClientGetter(ctrl *gomock.Controller) *MockWSClientGetter {
	mock := &MockWSClientGetter{ctrl: ctrl}
	mock.recorder = &MockWSClientGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWSClientGetter) EXPECT() *MockWSClientGetterMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockWSClientGetter) Get(arg0 string) event.WSEventSender {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(event.WSEventSender)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockWSClientGetterMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWSClientGetter)(nil).Get), arg0)
}

// MockWSEventSender is a mock of WSEventSender interface
type MockWSEventSender struct {
	ctrl     *gomock.Controller
	recorder *MockWSEventSenderMockRecorder
}

// MockWSEventSenderMockRecorder is the mock recorder for MockWSEventSender
type MockWSEventSenderMockRecorder struct {
	mock *MockWSEventSender
}

// NewMockWSEventSender creates a new mock instance
func NewMockWSEventSender(ctrl *gomock.Controller) *MockWSEventSender {
	mock := &MockWSEventSender{ctrl: ctrl}
	mock.recorder = &MockWSEventSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWSEventSender) EXPECT() *MockWSEventSenderMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockWSEventSender) Send(arg0 event.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Send", arg0)
}

// Send indicates an expected call of Send
func (mr *MockWSEventSenderMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockWSEventSender)(nil).Send), arg0)
}

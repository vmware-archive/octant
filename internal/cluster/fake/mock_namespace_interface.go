// Code generated by MockGen. DO NOT EDIT.
// Source: ../../pkg/cluster/namespace.go

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNamespaceInterface is a mock of NamespaceInterface interface.
type MockNamespaceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceInterfaceMockRecorder
}

// MockNamespaceInterfaceMockRecorder is the mock recorder for MockNamespaceInterface.
type MockNamespaceInterfaceMockRecorder struct {
	mock *MockNamespaceInterface
}

// NewMockNamespaceInterface creates a new mock instance.
func NewMockNamespaceInterface(ctrl *gomock.Controller) *MockNamespaceInterface {
	mock := &MockNamespaceInterface{ctrl: ctrl}
	mock.recorder = &MockNamespaceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamespaceInterface) EXPECT() *MockNamespaceInterfaceMockRecorder {
	return m.recorder
}

// HasNamespace mocks base method.
func (m *MockNamespaceInterface) HasNamespace(ctx context.Context, namespace string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasNamespace", ctx, namespace)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasNamespace indicates an expected call of HasNamespace.
func (mr *MockNamespaceInterfaceMockRecorder) HasNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasNamespace", reflect.TypeOf((*MockNamespaceInterface)(nil).HasNamespace), ctx, namespace)
}

// InitialNamespace mocks base method.
func (m *MockNamespaceInterface) InitialNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// InitialNamespace indicates an expected call of InitialNamespace.
func (mr *MockNamespaceInterfaceMockRecorder) InitialNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialNamespace", reflect.TypeOf((*MockNamespaceInterface)(nil).InitialNamespace))
}

// Names mocks base method.
func (m *MockNamespaceInterface) Names(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Names", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Names indicates an expected call of Names.
func (mr *MockNamespaceInterfaceMockRecorder) Names(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Names", reflect.TypeOf((*MockNamespaceInterface)(nil).Names), ctx)
}

// ProvidedNamespaces mocks base method.
func (m *MockNamespaceInterface) ProvidedNamespaces(ctx context.Context) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvidedNamespaces", ctx)
	ret0, _ := ret[0].([]string)
	return ret0
}

// ProvidedNamespaces indicates an expected call of ProvidedNamespaces.
func (mr *MockNamespaceInterfaceMockRecorder) ProvidedNamespaces(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvidedNamespaces", reflect.TypeOf((*MockNamespaceInterface)(nil).ProvidedNamespaces), ctx)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: instance.go

// Package fake is a generated GoMock package.
package fake

import (
	gomock "github.com/golang/mock/gomock"
	terminal "github.com/vmware-tanzu/octant/internal/terminal"
	store "github.com/vmware-tanzu/octant/pkg/store"
	remotecommand "k8s.io/client-go/tools/remotecommand"
	reflect "reflect"
	time "time"
)

// MockInstance is a mock of Instance interface
type MockInstance struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceMockRecorder
}

// MockInstanceMockRecorder is the mock recorder for MockInstance
type MockInstanceMockRecorder struct {
	mock *MockInstance
}

// NewMockInstance creates a new mock instance
func NewMockInstance(ctrl *gomock.Controller) *MockInstance {
	mock := &MockInstance{ctrl: ctrl}
	mock.recorder = &MockInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstance) EXPECT() *MockInstanceMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockInstance) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockInstanceMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockInstance)(nil).ID))
}

// SessionID mocks base method
func (m *MockInstance) SessionID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionID")
	ret0, _ := ret[0].(string)
	return ret0
}

// SessionID indicates an expected call of SessionID
func (mr *MockInstanceMockRecorder) SessionID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionID", reflect.TypeOf((*MockInstance)(nil).SessionID))
}

// SetSessionID mocks base method
func (m *MockInstance) SetSessionID(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSessionID", arg0)
}

// SetSessionID indicates an expected call of SetSessionID
func (mr *MockInstanceMockRecorder) SetSessionID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSessionID", reflect.TypeOf((*MockInstance)(nil).SetSessionID), arg0)
}

// Key mocks base method
func (m *MockInstance) Key() store.Key {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(store.Key)
	return ret0
}

// Key indicates an expected call of Key
func (mr *MockInstanceMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockInstance)(nil).Key))
}

// Container mocks base method
func (m *MockInstance) Container() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Container")
	ret0, _ := ret[0].(string)
	return ret0
}

// Container indicates an expected call of Container
func (mr *MockInstanceMockRecorder) Container() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Container", reflect.TypeOf((*MockInstance)(nil).Container))
}

// Command mocks base method
func (m *MockInstance) Command() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Command")
	ret0, _ := ret[0].(string)
	return ret0
}

// Command indicates an expected call of Command
func (mr *MockInstanceMockRecorder) Command() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockInstance)(nil).Command))
}

// Scrollback mocks base method
func (m *MockInstance) Scrollback() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scrollback")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Scrollback indicates an expected call of Scrollback
func (mr *MockInstanceMockRecorder) Scrollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scrollback", reflect.TypeOf((*MockInstance)(nil).Scrollback))
}

// ResetScrollback mocks base method
func (m *MockInstance) ResetScrollback() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetScrollback")
}

// ResetScrollback indicates an expected call of ResetScrollback
func (mr *MockInstanceMockRecorder) ResetScrollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetScrollback", reflect.TypeOf((*MockInstance)(nil).ResetScrollback))
}

// Read mocks base method
func (m *MockInstance) Read(size int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", size)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockInstanceMockRecorder) Read(size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockInstance)(nil).Read), size)
}

// Write mocks base method
func (m *MockInstance) Write(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockInstanceMockRecorder) Write(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockInstance)(nil).Write), key)
}

// Resize mocks base method
func (m *MockInstance) Resize(cols, rows uint16) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Resize", cols, rows)
}

// Resize indicates an expected call of Resize
func (mr *MockInstanceMockRecorder) Resize(cols, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resize", reflect.TypeOf((*MockInstance)(nil).Resize), cols, rows)
}

// Stop mocks base method
func (m *MockInstance) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockInstanceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockInstance)(nil).Stop))
}

// Active mocks base method
func (m *MockInstance) Active() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Active")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Active indicates an expected call of Active
func (mr *MockInstanceMockRecorder) Active() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Active", reflect.TypeOf((*MockInstance)(nil).Active))
}

// SetExitMessage mocks base method
func (m *MockInstance) SetExitMessage(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetExitMessage", arg0)
}

// SetExitMessage indicates an expected call of SetExitMessage
func (mr *MockInstanceMockRecorder) SetExitMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExitMessage", reflect.TypeOf((*MockInstance)(nil).SetExitMessage), arg0)
}

// ExitMessage mocks base method
func (m *MockInstance) ExitMessage() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExitMessage")
	ret0, _ := ret[0].(string)
	return ret0
}

// ExitMessage indicates an expected call of ExitMessage
func (mr *MockInstanceMockRecorder) ExitMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitMessage", reflect.TypeOf((*MockInstance)(nil).ExitMessage))
}

// CreatedAt mocks base method
func (m *MockInstance) CreatedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt
func (mr *MockInstanceMockRecorder) CreatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockInstance)(nil).CreatedAt))
}

// PTY mocks base method
func (m *MockInstance) PTY() terminal.PTY {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PTY")
	ret0, _ := ret[0].(terminal.PTY)
	return ret0
}

// PTY indicates an expected call of PTY
func (mr *MockInstanceMockRecorder) PTY() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PTY", reflect.TypeOf((*MockInstance)(nil).PTY))
}

// MockPTY is a mock of PTY interface
type MockPTY struct {
	ctrl     *gomock.Controller
	recorder *MockPTYMockRecorder
}

// MockPTYMockRecorder is the mock recorder for MockPTY
type MockPTYMockRecorder struct {
	mock *MockPTY
}

// NewMockPTY creates a new mock instance
func NewMockPTY(ctrl *gomock.Controller) *MockPTY {
	mock := &MockPTY{ctrl: ctrl}
	mock.recorder = &MockPTYMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPTY) EXPECT() *MockPTYMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockPTY) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockPTYMockRecorder) Read(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockPTY)(nil).Read), p)
}

// Write mocks base method
func (m *MockPTY) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockPTYMockRecorder) Write(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockPTY)(nil).Write), p)
}

// Next mocks base method
func (m *MockPTY) Next() *remotecommand.TerminalSize {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*remotecommand.TerminalSize)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockPTYMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockPTY)(nil).Next))
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vmware-tanzu/octant/internal/octant (interfaces: DashboardClientFunction)

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"

	goja "github.com/dop251/goja"
	gomock "github.com/golang/mock/gomock"
)

// MockDashboardClientFunction is a mock of DashboardClientFunction interface
type MockDashboardClientFunction struct {
	ctrl     *gomock.Controller
	recorder *MockDashboardClientFunctionMockRecorder
}

// MockDashboardClientFunctionMockRecorder is the mock recorder for MockDashboardClientFunction
type MockDashboardClientFunctionMockRecorder struct {
	mock *MockDashboardClientFunction
}

// NewMockDashboardClientFunction creates a new mock instance
func NewMockDashboardClientFunction(ctrl *gomock.Controller) *MockDashboardClientFunction {
	mock := &MockDashboardClientFunction{ctrl: ctrl}
	mock.recorder = &MockDashboardClientFunctionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDashboardClientFunction) EXPECT() *MockDashboardClientFunctionMockRecorder {
	return m.recorder
}

// Call mocks base method
func (m *MockDashboardClientFunction) Call(arg0 context.Context, arg1 *goja.Runtime) func(goja.FunctionCall) goja.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", arg0, arg1)
	ret0, _ := ret[0].(func(goja.FunctionCall) goja.Value)
	return ret0
}

// Call indicates an expected call of Call
func (mr *MockDashboardClientFunctionMockRecorder) Call(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockDashboardClientFunction)(nil).Call), arg0, arg1)
}

// Name mocks base method
func (m *MockDashboardClientFunction) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockDashboardClientFunctionMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDashboardClientFunction)(nil).Name))
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vmware-tanzu/octant/internal/config (interfaces: KubeContextDecorator)

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	kubeconfig "github.com/vmware-tanzu/octant/internal/kubeconfig"
	cluster "github.com/vmware-tanzu/octant/pkg/cluster"
)

// MockKubeContextDecorator is a mock of KubeContextDecorator interface
type MockKubeContextDecorator struct {
	ctrl     *gomock.Controller
	recorder *MockKubeContextDecoratorMockRecorder
}

// MockKubeContextDecoratorMockRecorder is the mock recorder for MockKubeContextDecorator
type MockKubeContextDecoratorMockRecorder struct {
	mock *MockKubeContextDecorator
}

// NewMockKubeContextDecorator creates a new mock instance
func NewMockKubeContextDecorator(ctrl *gomock.Controller) *MockKubeContextDecorator {
	mock := &MockKubeContextDecorator{ctrl: ctrl}
	mock.recorder = &MockKubeContextDecoratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKubeContextDecorator) EXPECT() *MockKubeContextDecoratorMockRecorder {
	return m.recorder
}

// ClusterClient mocks base method
func (m *MockKubeContextDecorator) ClusterClient() cluster.ClientInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterClient")
	ret0, _ := ret[0].(cluster.ClientInterface)
	return ret0
}

// ClusterClient indicates an expected call of ClusterClient
func (mr *MockKubeContextDecoratorMockRecorder) ClusterClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterClient", reflect.TypeOf((*MockKubeContextDecorator)(nil).ClusterClient))
}

// Contexts mocks base method
func (m *MockKubeContextDecorator) Contexts() []kubeconfig.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contexts")
	ret0, _ := ret[0].([]kubeconfig.Context)
	return ret0
}

// Contexts indicates an expected call of Contexts
func (mr *MockKubeContextDecoratorMockRecorder) Contexts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contexts", reflect.TypeOf((*MockKubeContextDecorator)(nil).Contexts))
}

// CurrentContext mocks base method
func (m *MockKubeContextDecorator) CurrentContext() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentContext")
	ret0, _ := ret[0].(string)
	return ret0
}

// CurrentContext indicates an expected call of CurrentContext
func (mr *MockKubeContextDecoratorMockRecorder) CurrentContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentContext", reflect.TypeOf((*MockKubeContextDecorator)(nil).CurrentContext))
}

// SwitchContext mocks base method
func (m *MockKubeContextDecorator) SwitchContext(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwitchContext", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SwitchContext indicates an expected call of SwitchContext
func (mr *MockKubeContextDecoratorMockRecorder) SwitchContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchContext", reflect.TypeOf((*MockKubeContextDecorator)(nil).SwitchContext), arg0, arg1)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vmware-tanzu/octant/internal/resourceviewer (interfaces: ObjectStatus)

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	runtime "k8s.io/apimachinery/pkg/runtime"

	link "github.com/vmware-tanzu/octant/internal/link"
	objectstatus "github.com/vmware-tanzu/octant/internal/objectstatus"
)

// MockObjectStatus is a mock of ObjectStatus interface.
type MockObjectStatus struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStatusMockRecorder
}

// MockObjectStatusMockRecorder is the mock recorder for MockObjectStatus.
type MockObjectStatusMockRecorder struct {
	mock *MockObjectStatus
}

// NewMockObjectStatus creates a new mock instance.
func NewMockObjectStatus(ctrl *gomock.Controller) *MockObjectStatus {
	mock := &MockObjectStatus{ctrl: ctrl}
	mock.recorder = &MockObjectStatusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStatus) EXPECT() *MockObjectStatusMockRecorder {
	return m.recorder
}

// Status mocks base method.
func (m *MockObjectStatus) Status(arg0 context.Context, arg1 runtime.Object, arg2 link.Interface) (*objectstatus.ObjectStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0, arg1, arg2)
	ret0, _ := ret[0].(*objectstatus.ObjectStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockObjectStatusMockRecorder) Status(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockObjectStatus)(nil).Status), arg0, arg1, arg2)
}
